//
// FX Version: fx_5_0
//
// 1 local buffer(s)
//
cbuffer cbPerObject : register(b0)
{
    float4x4 gWorldViewProj;            // Offset:    0, size:   64
    float   gTime;                      // Offset:   64, size:    4
}

//
// 2 local object(s)
//
RasterizerState WireFrameRS
{
    FillMode = uint(WIREFRAME /* 2 */);
    CullMode = uint(BACK /* 3 */);
    FrontCounterClockwise = bool(FALSE /* false */);
};
RasterizerState SolidRS
{
    FillMode = uint(SOLID /* 3 */);
    CullMode = uint(BACK /* 3 */);
    FrontCounterClockwise = bool(FALSE /* false */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 ColorTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorldViewProj;           // Offset:    0 Size:    64
                //   float gTime;                       // Offset:   64 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                // TEXCOORD                 0   xy          2     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[4], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- PosL.x; v0.y <- PosL.y; v0.z <- PosL.z; 
                //   v1.x <- Color.x; v1.y <- Color.y; v1.z <- Color.z; v1.w <- Color.w; 
                //   v2.x <- uv.x; v2.y <- uv.y; 
                //   o1.x <- <VS return value>.Color.x; o1.y <- <VS return value>.Color.y; o1.z <- <VS return value>.Color.z; o1.w <- <VS return value>.Color.w; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 31 "D:\kimhanil\MyEngine\Shader\color.hlsl"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // r1.x <- output.PosH.x
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // r1.y <- output.PosH.y
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // r1.z <- output.PosH.z
                dp4 r1.w, r0.xyzw, cb0[3].xyzw  // r1.w <- output.PosH.w
                
                #line 32
                mov r0.xyzw, v1.xyzw  // r0.x <- output.Color.x; r0.y <- output.Color.y; r0.z <- output.Color.z; r0.w <- output.Color.w
                
                #line 33
                mov o0.xyzw, r1.xyzw
                mov o1.xyzw, r0.xyzw
                ret 
                // Approximately 10 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float       
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_input_ps linear v1.xyzw
                dcl_output o0.xyzw
                //
                // Initial variable locations:
                //   v0.x <- input.Pos.x; v0.y <- input.Pos.y; v0.z <- input.Pos.z; v0.w <- input.Pos.w; 
                //   v1.x <- input.Color.x; v1.y <- input.Color.y; v1.z <- input.Color.z; v1.w <- input.Color.w; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 38 "D:\kimhanil\MyEngine\Shader\color.hlsl"
                mov o0.xyzw, v1.xyzw
                ret 
                // Approximately 2 instruction slots used
                            
            };
            RasterizerState = SolidRS;
        }

    }

}

