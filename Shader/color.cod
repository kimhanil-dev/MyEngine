//
// FX Version: fx_5_0
//
// 1 local buffer(s)
//
cbuffer cbPerObject : register(b0)
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gViewProj;                 // Offset:   64, size:   64
    float4  gPointLightPos;             // Offset:  128, size:   16
    float   gPointLightRadius;          // Offset:  144, size:    4
    float3  gPointLightColor;           // Offset:  148, size:   12
    float3  gEyePosW;                   // Offset:  160, size:   12
    float   gTime;                      // Offset:  172, size:    4
}

//
// 2 local object(s)
//
RasterizerState WireFrameRS
{
    FillMode = uint(WIREFRAME /* 2 */);
    CullMode = uint(BACK /* 3 */);
    FrontCounterClockwise = bool(FALSE /* false */);
};
RasterizerState SolidRS
{
    FillMode = uint(SOLID /* 3 */);
    CullMode = uint(BACK /* 3 */);
    FrontCounterClockwise = bool(FALSE /* false */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 ColorTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gViewProj;                // Offset:   64 Size:    64
                //   float4 gPointLightPos;             // Offset:  128 Size:    16 [unused]
                //   float gPointLightRadius;           // Offset:  144 Size:     4 [unused]
                //   float3 gPointLightColor;           // Offset:  148 Size:    12 [unused]
                //   float3 gEyePosW;                   // Offset:  160 Size:    12 [unused]
                //   float gTime;                       // Offset:  172 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TANGENT                  0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float       
                // TEXCOORD                 1   xy          4     NONE   float       
                // COLOR                    0   xyzw        5     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[8], immediateIndexed
                dcl_input v0.xyz
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_temps 3
                //
                // Initial variable locations:
                //   v0.x <- input.PosL.x; v0.y <- input.PosL.y; v0.z <- input.PosL.z; 
                //   v1.x <- input.Tangent.x; v1.y <- input.Tangent.y; v1.z <- input.Tangent.z; 
                //   v2.x <- input.Normal.x; v2.y <- input.Normal.y; v2.z <- input.Normal.z; 
                //   v3.x <- input.Tex0.x; v3.y <- input.Tex0.y; 
                //   v4.x <- input.Tex1.x; v4.y <- input.Tex1.y; 
                //   v5.x <- input.Color.x; v5.y <- input.Color.y; v5.z <- input.Color.z; v5.w <- input.Color.w; 
                //   o1.x <- <VS return value>.Color.x; o1.y <- <VS return value>.Color.y; o1.z <- <VS return value>.Color.z; o1.w <- <VS return value>.Color.w; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 53 "D:\kimhanil\MyEngine\Shader\color.hlsl"
                mov r0.xyz, v0.xyzx  // r0.x <- p.x; r0.y <- p.y; r0.z <- p.z
                mov r0.w, l(1.000000)  // r0.w <- p.w
                
                #line 60
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // r1.x <- p.x
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // r1.y <- p.y
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // r1.z <- p.z
                dp4 r1.w, r0.xyzw, cb0[3].xyzw  // r1.w <- p.w
                
                #line 63
                mov r0.x, l(0.523599)  // r0.x <- spotLightAngle
                
                #line 102
                sincos null, r0.xyz, r0.xxxx  // r0.x <- output.Color.x; r0.y <- output.Color.y; r0.z <- output.Color.z
                
                #line 103
                mov r0.w, l(1.000000)  // r0.w <- output.Color.w
                
                #line 105
                dp4 r2.x, r1.xyzw, cb0[4].xyzw  // r2.x <- output.PosH.x
                dp4 r2.y, r1.xyzw, cb0[5].xyzw  // r2.y <- output.PosH.y
                dp4 r2.z, r1.xyzw, cb0[6].xyzw  // r2.z <- output.PosH.z
                dp4 r2.w, r1.xyzw, cb0[7].xyzw  // r2.w <- output.PosH.w
                
                #line 106
                mov o0.xyzw, r2.xyzw
                mov o1.xyz, r0.xyzx
                mov o1.w, r0.w
                ret 
                // Approximately 17 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float       
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_input_ps linear v1.xyzw
                dcl_output o0.xyzw
                //
                // Initial variable locations:
                //   v0.x <- input.Pos.x; v0.y <- input.Pos.y; v0.z <- input.Pos.z; v0.w <- input.Pos.w; 
                //   v1.x <- input.Color.x; v1.y <- input.Color.y; v1.z <- input.Color.z; v1.w <- input.Color.w; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 111 "D:\kimhanil\MyEngine\Shader\color.hlsl"
                mov o0.xyzw, v1.xyzw
                ret 
                // Approximately 2 instruction slots used
                            
            };
            RasterizerState = SolidRS;
        }

    }

}

