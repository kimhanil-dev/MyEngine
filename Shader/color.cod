//
// FX Version: fx_5_0
//
// 1 local buffer(s)
//
cbuffer cbPerObject : register(b0)
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gViewProj;                 // Offset:   64, size:   64
    float3  gEyePosW;                   // Offset:  128, size:   12
    float   gTime;                      // Offset:  140, size:    4
    Material gMaterial;                 // Offset:  144, size:   48
    DirectionalLight gDirectionalLight; // Offset:  192, size:   64
    PointLight gPointLight;             // Offset:  256, size:   80
    SpotLight gSpotLight;               // Offset:  336, size:   96
}

//
// 2 local object(s)
//
RasterizerState WireFrameRS
{
    FillMode = uint(WIREFRAME /* 2 */);
    CullMode = uint(BACK /* 3 */);
    FrontCounterClockwise = bool(FALSE /* false */);
};
RasterizerState SolidRS
{
    FillMode = uint(SOLID /* 3 */);
    CullMode = uint(BACK /* 3 */);
    FrontCounterClockwise = bool(FALSE /* false */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 ColorTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gViewProj;                // Offset:   64 Size:    64
                //   float3 gEyePosW;                   // Offset:  128 Size:    12 [unused]
                //   float gTime;                       // Offset:  140 Size:     4 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  144
                //       float4 Diffuse;                // Offset:  160
                //       float4 Specular;               // Offset:  176
                //
                //   } gMaterial;                       // Offset:  144 Size:    48
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float4 Direction;              // Offset:  240
                //
                //   } gDirectionalLight;               // Offset:  192 Size:    64 [unused]
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float3 Position;               // Offset:  304
                //       float Range;                   // Offset:  316
                //       float3 Att;                    // Offset:  320
                //       float pad;                     // Offset:  332
                //
                //   } gPointLight;                     // Offset:  256 Size:    80 [unused]
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  336
                //       float4 Diffuse;                // Offset:  352
                //       float4 Specular;               // Offset:  368
                //       float3 Position;               // Offset:  384
                //       float Range;                   // Offset:  396
                //       float3 Att;                    // Offset:  400
                //       float pad;                     // Offset:  412
                //       float3 Direction;              // Offset:  416
                //       float Spot;                    // Offset:  428
                //
                //   } gSpotLight;                      // Offset:  336 Size:    96
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TANGENT                  0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float       
                // TEXCOORD                 1   xy          4     NONE   float       
                // COLOR                    0   xyzw        5     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[27], immediateIndexed
                dcl_input v0.xyz
                dcl_input v2.xyz
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_temps 9
                //
                // Initial variable locations:
                //   v0.x <- input.PosL.x; v0.y <- input.PosL.y; v0.z <- input.PosL.z; 
                //   v1.x <- input.Tangent.x; v1.y <- input.Tangent.y; v1.z <- input.Tangent.z; 
                //   v2.x <- input.Normal.x; v2.y <- input.Normal.y; v2.z <- input.Normal.z; 
                //   v3.x <- input.Tex0.x; v3.y <- input.Tex0.y; 
                //   v4.x <- input.Tex1.x; v4.y <- input.Tex1.y; 
                //   v5.x <- input.Color.x; v5.y <- input.Color.y; v5.z <- input.Color.z; v5.w <- input.Color.w; 
                //   o1.x <- <VS return value>.Color.x; o1.y <- <VS return value>.Color.y; o1.z <- <VS return value>.Color.z; o1.w <- <VS return value>.Color.w; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 199 "D:\kimhanil\MyEngine\Shader\color.hlsl"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // r1.x <- posW.x
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // r1.y <- posW.y
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // r1.z <- posW.z
                dp4 r1.w, r0.xyzw, cb0[3].xyzw  // r1.w <- posW.w
                
                #line 200
                dp3 r0.x, v2.xyzx, cb0[0].xyzx  // r0.x <- normalW.x
                dp3 r0.y, v2.xyzx, cb0[1].xyzx  // r0.y <- normalW.y
                dp3 r0.z, v2.xyzx, cb0[2].xyzx  // r0.z <- normalW.z
                
                #line 210
                nop 
                mov r2.xyzw, cb0[10].xyzw
                mov r3.xyzw, cb0[22].xyzw
                mov r4.xyz, cb0[24].xyzx
                mov r5.xyz, cb0[25].xyzx
                mov r6.xyz, cb0[26].xyzx
                mov r0.w, cb0[24].w
                mov r4.w, cb0[26].w
                mov r1.xyz, r1.xyzx
                mov r0.xyz, r0.xyzx
                
                #line 158
                mov r7.xyzw, l(0,0,0,0)  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z; r7.w <- diffuse.w
                
                #line 161
                mov r8.xyz, -r1.xyzx
                add r4.xyz, r4.xyzx, r8.xyzx  // r4.x <- lightVec.x; r4.y <- lightVec.y; r4.z <- lightVec.z
                
                #line 163
                dp3 r5.w, r4.xyzx, r4.xyzx
                sqrt r8.y, r5.w  // r8.y <- d
                
                #line 165
                lt r0.w, r0.w, r8.y
                
                #line 168
                if_z r0.w
                  div r4.xyz, r4.xyzx, r8.yyyy
                
                #line 172
                  dp3 r0.x, r4.xyzx, r0.xyzx  // r0.x <- diffuseFactor
                
                #line 175
                  lt r0.y, l(0.000000), r0.x
                
                #line 181
                  mul r2.xyzw, r2.xyzw, r0.xxxx
                  mul r2.xyzw, r3.xyzw, r2.xyzw  // r2.x <- diffuse.x; r2.y <- diffuse.y; r2.z <- diffuse.z; r2.w <- diffuse.w
                
                #line 182
                  movc r0.xyzw, r0.yyyy, r2.xyzw, r7.xyzw  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z; r0.w <- diffuse.w
                
                #line 184
                  mov r2.xyz, -r4.xyzx
                  dp3 r2.x, r2.xyzx, r6.xyzx
                  max r2.x, r2.x, l(0.000000)
                  log r2.x, r2.x
                  mul r2.x, r2.x, r4.w
                  exp r2.x, r2.x  // r2.x <- spot
                
                #line 185
                  mul r8.z, r8.y, r8.y
                  mov r8.x, l(1.000000)
                  dp3 r2.y, r5.xyzx, r8.xyzx
                  div r2.x, r2.x, r2.y  // r2.x <- att
                
                #line 189
                  mul r7.xyzw, r0.xyzw, r2.xxxx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z; r7.w <- diffuse.w
                endif 
                
                #line 210
                mov r7.xyzw, r7.xyzw  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z; r7.w <- diffuse.w
                
                #line 212
                dp4 r0.x, r1.xyzw, cb0[4].xyzw  // r0.x <- output.PosH.x
                dp4 r0.y, r1.xyzw, cb0[5].xyzw  // r0.y <- output.PosH.y
                dp4 r0.z, r1.xyzw, cb0[6].xyzw  // r0.z <- output.PosH.z
                dp4 r0.w, r1.xyzw, cb0[7].xyzw  // r0.w <- output.PosH.w
                
                #line 213
                mov r7.xyzw, r7.xyzw  // r7.x <- output.Color.x; r7.y <- output.Color.y; r7.z <- output.Color.z; r7.w <- output.Color.w
                
                #line 215
                mov o0.xyzw, r0.xyzw
                mov o1.xyzw, r7.xyzw
                ret 
                // Approximately 53 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float       
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_input_ps linear v1.xyzw
                dcl_output o0.xyzw
                //
                // Initial variable locations:
                //   v0.x <- input.Pos.x; v0.y <- input.Pos.y; v0.z <- input.Pos.z; v0.w <- input.Pos.w; 
                //   v1.x <- input.Color.x; v1.y <- input.Color.y; v1.z <- input.Color.z; v1.w <- input.Color.w; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 220 "D:\kimhanil\MyEngine\Shader\color.hlsl"
                mov o0.xyzw, v1.xyzw
                ret 
                // Approximately 2 instruction slots used
                            
            };
            RasterizerState = SolidRS;
        }

    }

}

