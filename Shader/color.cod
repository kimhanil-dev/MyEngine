//
// FX Version: fx_5_0
//
// 1 local buffer(s)
//
cbuffer cbPerObject : register(b0)
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gViewProj;                 // Offset:   64, size:   64
    float4  gPointLightPos;             // Offset:  128, size:   16
    float   gPointLightRadius;          // Offset:  144, size:    4
    float3  gPointLightColor;           // Offset:  148, size:   12
    float3  gEyePosW;                   // Offset:  160, size:   12
    float   gTime;                      // Offset:  172, size:    4
}

//
// 2 local object(s)
//
RasterizerState WireFrameRS
{
    FillMode = uint(WIREFRAME /* 2 */);
    CullMode = uint(BACK /* 3 */);
    FrontCounterClockwise = bool(FALSE /* false */);
};
RasterizerState SolidRS
{
    FillMode = uint(SOLID /* 3 */);
    CullMode = uint(BACK /* 3 */);
    FrontCounterClockwise = bool(FALSE /* false */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 ColorTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gViewProj;                // Offset:   64 Size:    64
                //   float4 gPointLightPos;             // Offset:  128 Size:    16
                //   float gPointLightRadius;           // Offset:  144 Size:     4 [unused]
                //   float3 gPointLightColor;           // Offset:  148 Size:    12 [unused]
                //   float3 gEyePosW;                   // Offset:  160 Size:    12
                //   float gTime;                       // Offset:  172 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TANGENT                  0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float       
                // TEXCOORD                 1   xy          4     NONE   float       
                // COLOR                    0   xyzw        5     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[11], immediateIndexed
                dcl_input v0.xyz
                dcl_input v2.xyz
                dcl_input v5.xyz
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- input.PosL.x; v0.y <- input.PosL.y; v0.z <- input.PosL.z; 
                //   v1.x <- input.Tangent.x; v1.y <- input.Tangent.y; v1.z <- input.Tangent.z; 
                //   v2.x <- input.Normal.x; v2.y <- input.Normal.y; v2.z <- input.Normal.z; 
                //   v3.x <- input.Tex0.x; v3.y <- input.Tex0.y; 
                //   v4.x <- input.Tex1.x; v4.y <- input.Tex1.y; 
                //   v5.x <- input.Color.x; v5.y <- input.Color.y; v5.z <- input.Color.z; v5.w <- input.Color.w; 
                //   o1.x <- <VS return value>.Color.x; o1.y <- <VS return value>.Color.y; o1.z <- <VS return value>.Color.z; o1.w <- <VS return value>.Color.w; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 53 "D:\kimhanil\MyEngine\Shader\color.hlsl"
                mov r0.xyz, v0.xyzx  // r0.x <- p.x; r0.y <- p.y; r0.z <- p.z
                mov r0.w, l(1.000000)  // r0.w <- p.w
                
                #line 54
                mov r1.xyz, v2.xyzx  // r1.x <- n.x; r1.y <- n.y; r1.z <- n.z
                
                #line 60
                dp4 r2.x, r0.xyzw, cb0[0].xyzw  // r2.x <- p.x
                dp4 r2.y, r0.xyzw, cb0[1].xyzw  // r2.y <- p.y
                dp4 r2.z, r0.xyzw, cb0[2].xyzw  // r2.z <- p.z
                dp4 r2.w, r0.xyzw, cb0[3].xyzw  // r2.w <- p.w
                
                #line 61
                dp3 r0.x, r1.xyzx, cb0[0].xyzx  // r0.x <- n.x
                dp3 r0.y, r1.xyzx, cb0[1].xyzx  // r0.y <- n.y
                dp3 r0.z, r1.xyzx, cb0[2].xyzx  // r0.z <- n.z
                
                #line 68
                mov r1.xyz, -cb0[8].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- l.x; r1.y <- l.y; r1.z <- l.z
                
                #line 75
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distance
                
                #line 77
                mov r3.xyz, -r2.xyzx
                add r3.xyz, r3.xyzx, cb0[10].xyzx
                dp3 r1.w, r3.xyzx, r3.xyzx
                rsq r1.w, r1.w
                mul r3.xyz, r1.wwww, r3.xyzx  // r3.x <- viewDir.x; r3.y <- viewDir.y; r3.z <- viewDir.z
                
                #line 79
                itof r1.w, l(-2)
                dp3 r3.w, r0.xyzx, r1.xyzx
                mul r1.w, r1.w, r3.w
                mul r4.xyz, r0.xyzx, r1.wwww
                add r4.xyz, r1.xyzx, r4.xyzx  // r4.x <- r.x; r4.y <- r.y; r4.z <- r.z
                
                #line 81
                dp3 r1.w, r4.xyzx, r3.xyzx
                itof r3.x, l(0)
                max r1.w, r1.w, r3.x  // r1.w <- blinnPhong
                
                #line 82
                mov r1.xyz, -r1.xyzx
                dp3 r0.x, r0.xyzx, r1.xyzx
                itof r0.y, l(0)
                max r0.x, r0.y, r0.x  // r0.x <- lambert
                
                #line 87
                mul r0.xyz, r0.xxxx, v5.xyzx
                mul r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                
                #line 89
                mul r1.xyz, r1.wwww, v5.xyzx
                mul r1.xyz, r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r1.x <- specular.x; r1.y <- specular.y; r1.z <- specular.z
                
                #line 91
                mov r3.xyz, l(0.150000,0.150000,0.150000,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                
                #line 94
                add r0.xyz, r0.xyzx, r3.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z
                
                #line 96
                mov r1.x, l(0.300000)  // r1.x <- a0
                
                #line 97
                mov r1.y, l(0.150000)  // r1.y <- a1
                
                #line 98
                mov r1.z, l(0.150000)  // r1.z <- a2
                
                #line 99
                mul r1.y, r0.w, r1.y
                add r1.x, r1.y, r1.x
                mov r1.y, l(1.000000)
                mul r0.w, r0.w, r0.w
                mul r0.w, r0.w, r1.y
                mul r0.w, r0.w, r1.z
                add r0.w, r0.w, r1.x
                div r0.xyz, r0.xyzx, r0.wwww
                
                #line 101
                mov r0.xyz, r0.xyzx  // r0.x <- output.Color.x; r0.y <- output.Color.y; r0.z <- output.Color.z
                
                #line 102
                mov r0.w, l(1.000000)  // r0.w <- output.Color.w
                
                #line 104
                dp4 r1.x, r2.xyzw, cb0[4].xyzw  // r1.x <- output.PosH.x
                dp4 r1.y, r2.xyzw, cb0[5].xyzw  // r1.y <- output.PosH.y
                dp4 r1.z, r2.xyzw, cb0[6].xyzw  // r1.z <- output.PosH.z
                dp4 r1.w, r2.xyzw, cb0[7].xyzw  // r1.w <- output.PosH.w
                
                #line 105
                mov o0.xyzw, r1.xyzw
                mov o1.xyz, r0.xyzx
                mov o1.w, r0.w
                ret 
                // Approximately 59 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float       
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_input_ps linear v1.xyzw
                dcl_output o0.xyzw
                //
                // Initial variable locations:
                //   v0.x <- input.Pos.x; v0.y <- input.Pos.y; v0.z <- input.Pos.z; v0.w <- input.Pos.w; 
                //   v1.x <- input.Color.x; v1.y <- input.Color.y; v1.z <- input.Color.z; v1.w <- input.Color.w; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 110 "D:\kimhanil\MyEngine\Shader\color.hlsl"
                mov o0.xyzw, v1.xyzw
                ret 
                // Approximately 2 instruction slots used
                            
            };
            RasterizerState = SolidRS;
        }

    }

}

